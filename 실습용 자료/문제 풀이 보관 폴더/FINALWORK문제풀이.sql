--3.
SELECT BOOK_NO, BOOK_NM
FROM TB_BOOK
WHERE LENGTH(BOOK_NM) >= 25;

--4. 다시 풀기
SELECT WRITER_NM, OFFICE_TELNO,HOME_TELNO,MOBILE_NO
FROM TB_WRITER
WHERE MOBILE_NO LIKE '019%'
    AND WRITER_NM LIKE '김%'
ORDER BY WRITER_NM;

--5. 다시 풀기
SELECT COUNT(COMPOSE_TYPE) "작가(명)"
FROM TB_BOOK_AUTHOR
WHERE COMPOSE_TYPE = '옮김'
GROUP BY COMPOSE_TYPE;

--6.
SELECT COMPOSE_TYPE, COUNT(*)
FROM TB_BOOK_AUTHOR
GROUP BY COMPOSE_TYPE
HAVING COUNT(COMPOSE_TYPE) >= 300;

--7.
SELECT BOOK_NM, ISSUE_DATE, PUBLISHER_NM
FROM TB_BOOK
ORDER BY ISSUE_DATE DESC;

--8. 
-- 책을 많이 쓴 작가 순서대로
SELECT WRITER_NM, COUNT(WRITER_NO)
FROM TB_WRITER 
JOIN TB_BOOK_AUTHOR USING(WRITER_NO)
GROUP BY WRITER_NM
ORDER BY COUNT(BOOK_NO) DESC;

-- 상위 3명만 조회
SELECT 작가이름,권수
FROM (SELECT WRITER_NM "작가이름",
      COUNT(WRITER_NO) "권수",
      DENSE_RANK() OVER(ORDER BY COUNT(BOOK_NO) DESC) 순위
      FROM TB_WRITER 
      JOIN TB_BOOK_AUTHOR USING(WRITER_NO)
      GROUP BY WRITER_NM)
WHERE 순위 <= 3;      


-- 9.  다시풀기



--10.
CREATE TABLE TB_BOOK_TRANSLATOR (
    BOOK_NO VARCHAR2(10) NOT NULL,
    WRITER_NO VARCHAR2(10) NOT NULL,
    TRANS_LANG VARCHAR2(60),
    CONSTRAINT PK_BOOK_TRANSLATOR PRIMARY KEY (BOOK_NO, WRITER_NO),
    CONSTRAINT FK_BOOK_TRANSLATOR_01 FOREIGN KEY (BOOK_NO) REFERENCES TB_BOOK (BOOK_NO),
    CONSTRAINT FK_BOOK_TRANSLATOR_02 FOREIGN KEY (WRITER_NO) REFERENCES TB_WRITER (WRITER_NO)

);

-- 주석 추가
COMMENT ON COLUMN TB_BOOK_TRANSLATOR.WRITER_NO IS '작가 번호';
COMMENT ON COLUMN TB_BOOK_TRANSLATOR.BOOK_NO IS '도서 번호';
COMMENT ON COLUMN TB_BOOK_TRANSLATOR.TRANS_LANG IS '번역 언어';



--11.
---- 컬럼 복사를 위한 컬럼 추가
--ALTER TABLE TB_BOOK_TRANSLATOR ADD COMPOSE_TYPE VARCHAR2(20);
---- 컬럼 수를 맞추기 위한 컬럼 생성
--ALTER TABLE TB_BOOK_AUTHOR ADD TRANS_LANG VARCHAR2(60); 
--COMMIT;
--
---- 컬럼 복사
--INSERT ALL
--INTO TB_BOOK_TRANSLATOR VALUES (BOOK_NO, WRITER_NO, TRANS_LANG, COMPOSE_TYPE)
--SELECT BOOK_NO, WRITER_NO,TRANS_LANG, COMPOSE_TYPE FROM TB_BOOK_AUTHOR;
--
---- TB_BOOK_AUTHOR 데이터 삭제
--TRUNCATE TABLE TB_BOOK_AUTHOR;





-- 12.


SELECT BOOK_NM 번역서이름,
       WRITER_NM 번역자

FROM TB_BOOK_TRANSLATOR

JOIN TB_BOOK USING(BOOK_NO)
JOIN TB_WRITER USING(WRITER_NO)

WHERE COMPOSE_TYPE = '엮음'
    AND EXTRACT (YEAR FROM ISSUE_DATE) = 2007;


-- 13.

CREATE OR REPLACE VIEW VW_BOOK_TRANSLATOR
AS SELECT BOOK_NM 도서명,
       WRITER_NM 번역자,
       ISSUE_DATE 출판일

   FROM TB_BOOK_TRANSLATOR

   JOIN TB_BOOK USING(BOOK_NO)
   JOIN TB_WRITER USING(WRITER_NO)

   WHERE COMPOSE_TYPE = '엮음'
       AND EXTRACT (YEAR FROM ISSUE_DATE) = 2007
   WITH READ ONLY;

-- 14.
INSERT INTO TB_PUBLISHER VALUES('춘 출판사', '02-6710-3737',DEFAULT);

-- 15.
SELECT WRITER_NM, COUNT(WRITER_NO)
FROM TB_WRITER
GROUP BY WRITER_NM
HAVING COUNT(WRITER_NO)>1;

-- 16.
UPDATE TB_BOOK_AUTHOR
SET COMPOSE_TYPE = '지음'
WHERE COMPOSE_TYPE IS NULL;

COMMIT;

-- 17.
SELECT WRITER_NM, OFFICE_TELNO
FROM TB_WRITER
WHERE OFFICE_TELNO LIKE '02%'
    AND SUBSTR(OFFICE_TELNO,7,1) = '-';
-- WHERE OFFICE_TELNO LIKE '02-___-%';


-- 18.
SELECT WRITER_NM
FROM TB_WRITER
WHERE EXTRACT(YEAR FROM (TO_DATE(20060101, 'RRRRMMDD'))) - EXTRACT(YEAR FROM REGIST_DATE)  >= 31;
-- WHERE MONTHS_BETWEEN(TO_DATE('20060101', 'RRRRMMDD'), REGIST_DATE) >= 372;


-- 19.
SELECT BOOK_NM 도서명,
       PRICE 가격,
       STOCK_QTY 재고수량,
       CASE WHEN STOCK_QTY >= 5 THEN '소량보유'
       ELSE '추가주문 필요'
       END 재고상태
FROM TB_BOOK
WHERE PUBLISHER_NM = '황금가지'
    AND STOCK_QTY <= 10
ORDER BY 재고수량 DESC,
         도서명;



-- 20.




-- 21.
SELECT BOOK_NM "도서명",
       STOCK_QTY "재고수량",
       PRICE "가격(org)",
       PRICE*0.8 "가격(new)"

FROM TB_BOOK

WHERE EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM ISSUE_DATE) > 30
    AND STOCK_QTY >= 90
    
ORDER BY 재고수량 DESC,
         "가격(new)" DESC,
         도서명 ;     

