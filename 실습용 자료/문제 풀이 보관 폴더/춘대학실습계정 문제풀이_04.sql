
-- 1. 학생이름과 주소지 표시, 정렬 이름으로 오름차순
SELECT STUDENT_NAME 학생이름, STUDENT_ADDRESS 주소지
FROM TB_STUDENT
ORDER BY 학생이름;

-- 2. 휴학중인 학생 이름, 주민번호를 나이가 적은 순서로 출력
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY TO_DATE(SUBSTR(STUDENT_SSN,1,6), 'RRMMDD') DESC;

--3.  주소지 강원도 또는 경기도 / 학번 1900년대  학생이름, 학번, 주소(오름차순)
SELECT STUDENT_NAME 학생이름,STUDENT_NO 학번,STUDENT_ADDRESS 거주지주소
FROM TB_STUDENT
WHERE ((SUBSTR(STUDENT_ADDRESS,1,3) = '경기도') OR (SUBSTR(STUDENT_ADDRESS,1,3) = '강원도') )
    AND STUDENT_NO LIKE '9%'
ORDER BY 학생이름;    


--4. 법학과 교수 중 가장 나이 많은 사람 
--ANSI
SELECT PROFESSOR_NAME, PROFESSOR_SSN

FROM TB_PROFESSOR

JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NAME = '법학과'
ORDER BY PROFESSOR_SSN;

-- ORACLE
SELECT PROFESSOR_NAME, PROFESSOR_SSN

FROM TB_PROFESSOR P , TB_DEPARTMENT D

WHERE P.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND DEPARTMENT_NAME = '법학과'
ORDER BY PROFESSOR_SSN;

--5. 2004년 2학기 C3118100 수강한 학생 학생번호, 학점 조회 학점이 높은 학생부터, 학점이 같으면 학번이 낮은 학생부터
-- ANSI
SELECT STUDENT_NO, POINT
FROM TB_STUDENT S
JOIN TB_GRADE G USING(STUDENT_NO)
WHERE TERM_NO = '200402' 
    AND CLASS_NO = 'C3118100'
ORDER BY POINT DESC, STUDENT_NO ASC;   -- 첫번 째 제시한 컬럼 값이 일치하면, 두번 째 제시한 정렬기준으로 정렬

-- 6. 학생번호, 학생 이름, 학과 이름 학생이름으로 오름차순 정렬
-- ORACLE
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME

FROM TB_STUDENT S, TB_DEPARTMENT D

WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
ORDER BY STUDENT_NAME;

-- ANSI
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME

FROM TB_STUDENT S

JOIN TB_DEPARTMENT D USING(DEPARTMENT_NO)
ORDER BY STUDENT_NAME;


-- 7. 춘기술대 과목이름, 과목의 학과 이름 출력
-- ORACLE
SELECT CLASS_NAME, DEPARTMENT_NAME

FROM TB_CLASS C, TB_DEPARTMENT D

WHERE C.DEPARTMENT_NO = D.DEPARTMENT_NO;

-- ANSI
SELECT CLASS_NAME, DEPARTMENT_NAME

FROM TB_CLASS C

JOIN TB_DEPARTMENT D USING(DEPARTMENT_NO);

-- 8. 과목별 교수 이름 과목이름 과 교수이름 출력

-- 과목 별 교수이므로 1) 과목에 해당하는 TB_CLASS 테이블과 2)과목에 해당하는 교수 번호 TB_CLASS_PROFESSOR 3)교수 이름은 TB_PROFESSOR에서 가져옴
-- ORACLE 
SELECT CLASS_NAME, PROFESSOR_NAME

FROM TB_CLASS C, TB_CLASS_PROFESSOR CP, TB_PROFESSOR P

WHERE C.CLASS_NO = CP.CLASS_NO 
    AND CP.PROFESSOR_NO = P.PROFESSOR_NO;
    
    
-- ANSI
SELECT CLASS_NAME, PROFESSOR_NAME

FROM TB_CLASS C

JOIN TB_CLASS_PROFESSOR CP USING(CLASS_NO)
JOIN TB_PROFESSOR P USING(PROFESSOR_NO);


-- 9. 인문사회 계열 과목 교수 찾기
-- ORACLE 
SELECT CLASS_NAME, PROFESSOR_NAME, CATEGORY

FROM TB_CLASS C, TB_CLASS_PROFESSOR CP, TB_PROFESSOR P, TB_DEPARTMENT D

WHERE C.CLASS_NO = CP.CLASS_NO 
    AND CP.PROFESSOR_NO = P.PROFESSOR_NO
    AND P.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND D.CATEGORY = '인문사회';
    
    
-- ANSI
SELECT C.CLASS_NAME, P.PROFESSOR_NAME

FROM TB_CLASS C

JOIN TB_CLASS_PROFESSOR CP USING(CLASS_NO)
JOIN TB_PROFESSOR P USING(PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON(P.DEPARTMENT_NO = D.DEPARTMENT_NO)

WHERE D.CATEGORY = '인문사회';

--10. 음악학과 학생 평점 학번, 학생이름, 전체 평점(반올림 1자리)
-- ORACLE
SELECT G.STUDENT_NO 학번,
       S.STUDENT_NAME 학생이름,
       ROUND(AVG(POINT),1) 전체평점
       
FROM TB_STUDENT S, TB_GRADE G, TB_DEPARTMENT D

WHERE S.STUDENT_NO = G.STUDENT_NO 
    AND S.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND D.DEPARTMENT_NAME = '음악학과'
    
GROUP BY G.STUDENT_NO, S.STUDENT_NAME
ORDER BY 학번;

-- ANSI
SELECT STUDENT_NO 학번,
       STUDENT_NAME 학생이름,
       ROUND(AVG(POINT),1) 전체평점
       
FROM TB_STUDENT 

JOIN TB_GRADE  USING(STUDENT_NO)
JOIN TB_DEPARTMENT  USING(DEPARTMENT_NO)

WHERE DEPARTMENT_NAME = '음악학과'

GROUP BY STUDENT_NO, STUDENT_NAME
ORDER BY 학번;

-- 11. 학번 A313047 학생 학과이름, 학생이름, 지도교수이름 출력
-- ORACLE
SELECT D.DEPARTMENT_NAME 학과이름,
       S.STUDENT_NAME 학생이름,
       P.PROFESSOR_NAME 지도교수이름

FROM TB_STUDENT S, TB_DEPARTMENT D, TB_PROFESSOR P

WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO 
    AND S.COACH_PROFESSOR_NO = P.PROFESSOR_NO
    AND S.STUDENT_NO = 'A313047';
    
--ANSI
SELECT DEPARTMENT_NAME 학과이름,
       STUDENT_NAME 학생이름,
       PROFESSOR_NAME 지도교수이름

FROM TB_STUDENT S
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
JOIN TB_PROFESSOR ON (COACH_PROFESSOR_NO = PROFESSOR_NO)

WHERE S.STUDENT_NO = 'A313047';


-- 12. 2007년 인간관계론 수강한 학생 이름, 수강학기 표시

-- ORACLE
SELECT STUDENT_NAME, TERM_NO "TERM_NAME"

FROM TB_STUDENT S, TB_CLASS C, TB_GRADE G

WHERE S.STUDENT_NO = G.STUDENT_NO
    AND G.CLASS_NO = C.CLASS_NO
    AND C.CLASS_NAME = '인간관계론'
    AND SUBSTR(TERM_NO,1,4) = '2007'
    
ORDER BY TERM_NAME;


--ANSI
SELECT STUDENT_NAME, TERM_NO "TERM_NAME"

FROM TB_STUDENT

JOIN TB_GRADE G USING(STUDENT_NO)
JOIN TB_CLASS C ON(G.CLASS_NO = C.CLASS_NO)

WHERE C.CLASS_NAME = '인간관계론'
    AND SUBSTR(TERM_NO,1,4) = '2007'
    
ORDER BY TERM_NAME;

-- 13. 예체능 계열 과목 중 과목 담당 교수 한명도 배정 받지 못한 과목 찾아 과목과 학과 출력
--ORACLE
SELECT DECODE(CP.PROFESSOR_NO,NULL,CLASS_NAME)"CLASS_NAME",DECODE(CP.PROFESSOR_NO,NULL,DEPARTMENT_NAME) "DEPARTMENT_NAME"
-- 교수가 없으면 출력하라
FROM TB_CLASS C, TB_DEPARTMENT D, TB_CLASS_PROFESSOR CP, TB_PROFESSOR P

WHERE C.DEPARTMENT_NO = D.DEPARTMENT_NO--과목이름 출력을 위해서 조인
    AND C.CLASS_NO = CP.CLASS_NO(+) -- CLASS PROFESSOR에 없는 클래스 넘버까지 출력하기 위해서 
    AND CP.PROFESSOR_NO = P.PROFESSOR_NO(+) -- CP_PROFESSOR에 없는 PROFESSOR_NO 모두 출력하기 위해서
    AND D.CATEGORY = '예체능' -- 예체능 계열 한정  
    AND DECODE(CP.PROFESSOR_NO,NULL,CLASS_NAME) IS NOT NULL -- NULL 값 제외
    AND DECODE(CP.PROFESSOR_NO,NULL,DEPARTMENT_NAME) IS NOT NULL;    -- NULL 값 제외

-- 13. 예체능 계열 과목 중 과목 담당 교수 한명도 배정 받지 못한 과목 찾아 과목과 학과 출력

-- ANSI
SELECT DECODE(CP.PROFESSOR_NO,NULL,CLASS_NAME)"CLASS_NAME",DECODE(CP.PROFESSOR_NO,NULL,DEPARTMENT_NAME) "DEPARTMENT_NAME"
-- 교수가 없으면 출력하라

FROM TB_CLASS C

JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO = D.DEPARTMENT_NO)
LEFT JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO = CP.CLASS_NO)
LEFT JOIN TB_PROFESSOR P ON(CP.PROFESSOR_NO = P.PROFESSOR_NO)

WHERE D.CATEGORY = '예체능' -- 예체능 계열 한정  
    AND DECODE(CP.PROFESSOR_NO,NULL,CLASS_NAME) IS NOT NULL -- NULL 값 제외
    AND DECODE(CP.PROFESSOR_NO,NULL,DEPARTMENT_NAME) IS NOT NULL;    -- NULL 값 제외


-- 14. 서반아어학과 지도교수 이름 찾고 없으면 지도교수 미지정 출력 고학번 먼저 출력
--ORACLE
SELECT STUDENT_NAME 학생이름, DECODE(COACH_PROFESSOR_NO,NULL,'지도교수미지정',PROFESSOR_NAME)지도교수

FROM TB_STUDENT S, TB_PROFESSOR P, TB_DEPARTMENT D

WHERE S.COACH_PROFESSOR_NO = P.PROFESSOR_NO(+)
    AND S.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND D.DEPARTMENT_NAME = '서반아어학과';

--ANSI
SELECT STUDENT_NAME 학생이름, DECODE(COACH_PROFESSOR_NO,NULL,'지도교수미지정',PROFESSOR_NAME)지도교수

FROM TB_STUDENT S

LEFT JOIN TB_PROFESSOR P ON(S.COACH_PROFESSOR_NO = P.PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON (S.DEPARTMENT_NO = D.DEPARTMENT_NO)

WHERE D.DEPARTMENT_NAME = '서반아어학과';

--15. 휴학생 아니고, 평점 4.0 이상 학번, 이름, 학과이름, 평점
-- ORACLE
SELECT G.STUDENT_NO 학번,
       S.STUDENT_NAME 이름,
       DEPARTMENT_NAME 학과이름,
       ROUND(AVG(POINT),8) 평점
       
FROM TB_STUDENT S, TB_DEPARTMENT D, TB_GRADE G

WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND S.STUDENT_NO = G.STUDENT_NO
    AND S.ABSENCE_YN = 'N'

GROUP BY G.STUDENT_NO,S.STUDENT_NAME,DEPARTMENT_NAME
HAVING AVG(POINT) >= 4
ORDER BY 학번;
 
--ANSI    
SELECT G.STUDENT_NO 학번,
       S.STUDENT_NAME 이름,
       DEPARTMENT_NAME 학과이름,
       ROUND(AVG(POINT),8) 평점
       
FROM TB_STUDENT S

JOIN TB_DEPARTMENT D ON (S.DEPARTMENT_NO = D.DEPARTMENT_NO)
JOIN TB_GRADE G ON (S.STUDENT_NO = G.STUDENT_NO)

WHERE S.ABSENCE_YN = 'N'

GROUP BY G.STUDENT_NO,S.STUDENT_NAME,DEPARTMENT_NAME
HAVING AVG(POINT) >= 4
ORDER BY 학번;

--16. 환경조경학과 전공과목 과목별 평점 파악
--ORACLE
SELECT C.CLASS_NO, C.CLASS_NAME, ROUND(AVG(POINT),8) "AVG(POINT)"

FROM TB_CLASS C, TB_GRADE G, TB_DEPARTMENT D

WHERE C.CLASS_NO = G.CLASS_NO
    AND C.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND D.DEPARTMENT_NAME = '환경조경학과'
    AND C.CLASS_TYPE LIKE '전공%'

GROUP BY C.CLASS_NO, C.CLASS_NAME

ORDER BY C.CLASS_NO;


-- ANSI
SELECT CLASS_NO, CLASS_NAME, ROUND(AVG(POINT),8) "AVG(POINT)"

FROM TB_CLASS 

JOIN TB_GRADE USING(CLASS_NO)
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)

WHERE DEPARTMENT_NAME = '환경조경학과'
    AND CLASS_TYPE LIKE '전공%'

GROUP BY CLASS_NO, CLASS_NAME

ORDER BY CLASS_NO;

-- 17. 최경희 학생과 같은 과 학생의 이름과 주소

SELECT STUDENT_NAME, STUDENT_ADDRESS

FROM TB_STUDENT

WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO     
                       FROM TB_STUDENT 
                       WHERE STUDENT_NAME = '최경희');

-- 18. 국어국문학과 총평점이 가장 높은 학생 이름 학번
-- ORACLE
SELECT G.STUDENT_NO, STUDENT_NAME

FROM TB_STUDENT S, TB_GRADE G, TB_DEPARTMENT D

WHERE S.STUDENT_NO = G.STUDENT_NO
    AND S.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND DEPARTMENT_NAME = '국어국문학과' 

GROUP BY G.STUDENT_NO, STUDENT_NAME

HAVING AVG(POINT) = (SELECT MAX(AVG(POINT)) 
                     FROM TB_STUDENT S, TB_GRADE G, TB_DEPARTMENT D

                     WHERE S.STUDENT_NO = G.STUDENT_NO
                     AND S.DEPARTMENT_NO = D.DEPARTMENT_NO
                     AND DEPARTMENT_NAME = '국어국문학과' 

                     GROUP BY G.STUDENT_NO, STUDENT_NAME) ;


-- ANSI
SELECT STUDENT_NO, STUDENT_NAME

FROM TB_STUDENT

JOIN TB_GRADE USING(STUDENT_NO)
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)

WHERE DEPARTMENT_NAME = '국어국문학과' 

GROUP BY STUDENT_NO, STUDENT_NAME

HAVING AVG(POINT) = (SELECT MAX(AVG(POINT)) 
                     FROM TB_STUDENT

                     JOIN TB_GRADE USING(STUDENT_NO)
                     JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)

                     WHERE DEPARTMENT_NAME = '국어국문학과' 

                     GROUP BY STUDENT_NO, STUDENT_NAME);


-- 19. 환경조경학과와 같은 계열 학과 별 전공과목 평점  계열학과명, 전공평점
-- ORACLE
SELECT D.DEPARTMENT_NAME 계열학과명, ROUND(AVG(POINT),1)

FROM TB_DEPARTMENT D, TB_GRADE G, TB_CLASS C

WHERE C.CLASS_NO = G.CLASS_NO
    AND C.DEPARTMENT_NO = D.DEPARTMENT_NO
    AND D.CATEGORY = (SELECT CATEGORY
                      FROM TB_DEPARTMENT
                      WHERE DEPARTMENT_NAME = '환경조경학과')
    AND C.CLASS_TYPE LIKE '전공%'
    
GROUP BY D.DEPARTMENT_NO,D.DEPARTMENT_NAME

ORDER BY 계열학과명;

--ANSI
SELECT DEPARTMENT_NAME 계열학과명, ROUND(AVG(POINT),1)

FROM TB_CLASS 

JOIN TB_GRADE USING (CLASS_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO) 

WHERE CATEGORY = (SELECT CATEGORY
                      FROM TB_DEPARTMENT
                      WHERE DEPARTMENT_NAME = '환경조경학과')
    AND CLASS_TYPE LIKE '전공%'
    
GROUP BY DEPARTMENT_NO,DEPARTMENT_NAME

ORDER BY 계열학과명;
